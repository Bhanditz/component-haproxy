# Haproxy Load Balancer
application:
  configuration:
    configuration.stats-user: admin
    configuration.stats-pass: pa55w0rd
    configuration.stats-port: 1926
    configuration.stats-url:  /admin?stats
    configuration.recipe-url: "https://s3.amazonaws.com/qubell-starter-kit-artifacts/qubell-bazaar/component-haproxy-cookbooks-stable-1fde225.tar.gz"
    configuration.bucket_type: "roundrobin"
    compute.hardwareId: "c3.large"
    compute.imageId:    "ami-246ed34c"
    compute.login:      "ec2-user"
    compute.locationId: "us-east-1"
  interfaces:
    configuration:
      "*": "bind(workflow#input.*)"
    compute:
      hardwareId: "bind(compute#configuration.hardwareId)"
      imageId:    "bind(compute#configuration.imageId)"
      login:      "bind(compute#configuration.login)"
      locationId: "bind(compute#configuration.locationId)"
    servers:
      "*": "bind(workflow#servers.*)"
    haproxy:
      "*": "bind(workflow#result.*)"
  components:
    workflow:
      type: workflow.Instance
      interfaces:
        input:
          stats-user: { type: configuration(string), name: Haproxy Statistics User     }
          stats-pass: { type: configuration(string), name: Haproxy Statistics Password }
          stats-port: { type: configuration(int),    name: Haproxy Statistics Port     }
          stats-url:  { type: configuration(string), name: Haproxy Statistics Url      }
          recipe-url: { type: configuration(string), name: Chef Cookbooks Url          }
          bucket_type:  { type: configuration(string), name: Haproxy bucket type        }
        compute:
          networks:        consume-signal(map<string, map<string, string>>)
          exec:            send-command(string command, int timeout => string stdOut, string stdErr => string stdOut, string stdErr, int exitCode)
          put-file:        send-command(string filename, bytes payload)
          get-file:        send-command(string filename => bytes payload)
        servers:
          app-host: consume-signal(string)
          app-uri: consume-signal(list<string>)
        actions:
          update: receive-command()
        result:
          lb-stats:  { type: publish-signal(object), name: HAProxy stats      }
          stats-url: { type: publish-signal(string), name: Haproxy statistics }
          entry-urls: { type: publish-signal(list<string>), name: Entry url          }
      required: [ compute ]
      configuration:
        configuration.triggers:
          input.stats-user: update
          input.stats-pass: update
          input.stats-port: update
          input.stats-url:  update
          input.recipe-url: update
          input.bucket_type:  update
          compute.networks: update
          servers.app-uri: reconfigure-servers
        configuration.propagateStatus: [ update, reconfigure-servers]
        configuration.workflows:
          update: &update
            steps:
              - get-signals:
                  action: getSignals
                  output:
                    signals: result
              - get-signals-multi:
                  action: getSignals
                  parameters:
                    multi: true
                  output:
                    peers: result
              - lb-install:
                  action: "chefsolo"
                  precedingPhases: [ get-signals, get-signals-multi ]
                  phase: lb-install
                  parameters:
                    roles: [ compute ]
                    runList: ["recipe[haproxy]"]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      haproxy:
                        stats_user: "{$.stats-user}"
                        stats_pass: "{$.stats-pass}"
                        stats_port: "{$.stats-port}"
                        stats_url: "{$.stats-url}"
              - add-servers:
                  action: "chefsolo"
                  precedingPhases: [ lb-install ]
                  parameters:
                    roles: [ compute ]
                    runList: [ "recipe[haproxy::add_servers]" ]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      haproxy:
                        host: "{$.signals.compute.networks.public.ip}"
                        server_uri: "{$.peers.servers.*.app-uri}"
                        bucket_type: "{$.bucket_type}"
                  output:
                      chefAttrs: chefState
            return:
              lb-stats:
                value:
                  lb-host: "{$.signals.compute.networks.public.ip}"
                  lb-statistics-url: "http://{$.signals.compute.networks.public.ip}:{$.stats-port}{$.stats-url}"
                  stats-user: "{$.stats-user}"
                  stats-pass: "{$.stats-pass}"
              stats-url: 
                    value: "http://{$.stats-user}:{$.stats-pass}@{$.signals.compute.networks.public.ip}:{$.stats-port}{$.stats-url}"
              entry-urls:
                    value: "{$.chefAttrs['*'][0]['haproxy']['entry_urls']}"
          launch: *update
          
          reconfigure-servers:
            steps:
              - get-signals:
                  action: getSignals
                  output:
                    signals: result
              - get-signals-multi:
                  action: getSignals
                  parameters:
                    multi: true
                  output:
                    peers: result
              - reconfigure-servers:
                  action: "chefsolo"
                  precedingPhases: [get-signals, get-signals-multi]
                  parameters:
                    roles: [ compute ]
                    runList: [ "recipe[haproxy::reconfigure]" ]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      haproxy:
                        server_uri: "{$.peers.servers.*.app-uri}"
                        bucket_type: "{$.bucket_type}"
                  output:
                      chefAttrs: chefState
            return:
              entry-urls:
                    value: "{$.chefAttrs['*'][0]['haproxy']['entry_urls']}"    
    compute:
      type: compute.Instance
  bindings:
   - [workflow#compute, compute]
